우리눈 : exposure 100이 최적이라면
카메라 : exposure 20이 최적 (어두운 사진을 더 잘 분석함) => canny edge를 실행했을 때 더 잘 윤곽선을 그려냄(쓸데없는 잡이미지 제거효과)(참고로 cannny는 파라미터 조절을 잘 헤주어야 함)
calibration : 광각카메라 휘어진 사진을 똑바로 피는 행위

OpenCV에선 흑백이미지가 가장 중요! 그리고 밝기 조절이 핵심!
칼라사진 : 칼라 밝기가 높으면 흑백이미지에서 백색으로 추출됨

roslaunch my_cam edge_cam.launch 를 실행하면 4개 사진이 나오는데 뿌옇게 보이는 사진이 노이즈가 제거된 좋은 사진이다.(잡다한 것들은 주변사진으로 통일) 단점 : 경계선이 무너짐

edge_cam.py
-----------------------------------------------
# ROS와 OpenCV 사이의 사진형식이 달라 형식을 변환시켜 줌
def img_callback(data):
    global cv_image
    cv_image = bridge.imgmsg_to_cv2(data, "bgr8")
----------------------------------------------
while not rospy.is_shutdown():

    gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)   #흐린색으로 표시
    blur_gray = cv2.GaussianBlur(gray,(5, 5), 0)		   #노이즈 제거(뿌옇게 바뀜)
    edge_img = cv2.Canny(np.uint8(blur_gray), 60, 70)	   #엣지 추출

    cv2.imshow("original", cv_image)    # "()"안에 들어가는 이름이 겹치면 덮어버림 -> 이름이 꼭 다 달라야 함
    cv2.imshow("gray", gray)
    cv2.imshow("gaussian blur", blur_gray)
    cv2.imshow("edge", edge_img)
    cv2.waitKey(1) # 1/1000초 동안 기다림 -> 모니터에 표시하기 위해 꼭 있어야 함


[신호등]
원형 검출하기 = canny edge로 바꾼 후 찾음 (찾아야 할 원의 크기범위 정해줘야 함)

[인공지능 활용 잘하기](예)
1/10크기의 모형자동차를 가지고 자율주행 공부를 하고 있어요, 라즈베리파이에  ROS Noetic이 설치되어 있습니다. 640x480 카메라를 사용합니다. 차선을 보고 주행하는 코드를 만들고 싶습니다. 입력으로 사진을 넘기고 출력으로 조향각과 속도값을 바도 싶습니다. 조향값과 속도값은 -100에서 100 사이로 해주세요

[라인 트래킹]
내가 바라보는 차선거리 = 속도에 따라 빠르면 멀리, 가까우면 가까운 거리를 바라보게 만든다.
L_ROW = 110  # 차선의 위치를 찾기 위한 ROI 안에서의 기준 Row값 = 튜닝포인트(이 값을 조절하여 멀리, 가까이 보도록 하는 것이다.)
{+- 떨어진 거리픽셀} * (P제어) = {나의 위치 - 화면 가운데(640pixel/2 = 320)} * 0.8 = 조향값
왼쪽차선/오른쪽차선 구분 => 기울기 활용 (이미지좌표 기준 기울기 음수 = 왼쪽 차선. 기울기 양수 = 오른쪽 차선)
끊어진 차선 연결 : 기울기 평균을 구하고 하나의 직선으로 만들어 버림(이때 특이점 제거=노이즈 제거를 잘 해주어야 한다.) or fitLine(끝점들을 모으고 그 점들을 관통하는 선을 그음)
*RANSAC 알고리즘
코너구간에서는 차의 위치를 차선 한가운데로 설정하면 안됨 -> 뒷쪽이 차선에 닿게 됨(자동차 회전할때를 생각해보기) 
원근변환(birdeyeview) : 기울어져 있는 차선을 2차원 평면으로 변환
HUF변환 or birdeye view 중 선택해서 사용 (sliding window??)
HUF변환 장단점 : 계산량은 적지만 그만큼 코너구간에서 약하다
birdeyeview 장단점 : 정확도는 높지만 그만큼 계산량이 많다.
----------------------------------개발 TIP---------------------------------------------
github를 활용하여 
codex (GPT 유료버전 깔면 쓸 수 있음)
-----------------------------------------------------------------------------------------

[PID제어]
PD제어로 주로 함
** PID제어를 라바콘에 써도 될듯(내 생각)


[튜닝 포인트]

파란불 일때 2초간 정지-필요없음
stop_car(2.0) - 필요없음
if문 속도걊 조절 -> 수정해도 됨
